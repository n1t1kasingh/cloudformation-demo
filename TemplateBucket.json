{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Create S3 bucket and Kinesis data Stream",
	"Parameters": {
		"S3BucketName": {
			"Description": "Enter Bucket Name",
			"Type": "String"
		},
		"DirsToCreate": {
			"Description": "Comma delimited list of directories to create.",
			"Type": "CommaDelimitedList"
		},
		"StreamData": {
			"Description": "Enter Stream Name",
			"Type": "String",
			"AllowedPattern": "kinesis-data-stream(-\\w+)+"
		}
	},
	"Resources": {
		"S3Bucket": {
			"Type": "AWS::S3::Bucket",
			"Status": "Enabled",
			"Properties": {
				"BucketName": null
			}
		},
		"MyStream": {
			"Type": "AWS::Kinesis::Stream",
			"Properties": {
				"Name": null,
				"RetentionPeriodHours": 168,
				"ShardCount": 4,
				"StreamEncryption": {
					"EncryptionType": "KMS",
					"KeyId": "alias/aws/kinesis"
				}
			}
		},
		"S3CustomResource": {
			"Type": "Custom::S3CustomResource",
			"Properties": {
				"ServiceToken": null,
				"the_bucket": null,
				"dirs_to_create": null
			}
		},
		"AWSLambdaFunction": {
			"Type": "AWS::Lambda::Function",
			"Properties": {
				"Description": "Work with S3 Buckets!",
				"FunctionName": null,
				"Handler": "index.handler",
				"Role": null,
				"Timeout": 360,
				"Runtime": "python3.6",
				"Code": {
					"ZipFile": "import boto3\nimport cfnresponse\ndef handler(event, context):\n    the_event = event['RequestType']\n    print(\"The event is: \", str(the_event))\n    response_data = {}\n    s_3 = boto3.client('s3')\n    the_bucket = event['ResourceProperties']['the_bucket']\n    dirs_to_create = event['ResourceProperties']['dirs_to_create']\n    try:\n        if the_event in ('Create', 'Update'):\n            print(\"Requested folders: \", str(dirs_to_create))\n            for dir_name in dirs_to_create:\n                print(\"Creating: \", str(dir_name))\n                s_3.put_object(Bucket=the_bucket,\n                               Key=(dir_name\n                                    + '/'))\n        print(\"Operation successful!\")\n        cfnresponse.send(event,\n                         context,\n                         cfnresponse.SUCCESS,\n                         response_data)\n    except Exception as e:\n        print(\"Operation failed...\")\n        print(str(e))\n        response_data['Data'] = str(e)\n        cfnresponse.send(event,\n                         context,\n                         cfnresponse.FAILED,\n                         response_data)\n"
				}
			}
		},
		"AWSLambdaExecutionRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Statement": [
						{
							"Action": [
								"sts:AssumeRole"
							],
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"lambda.amazonaws.com"
								]
							}
						}
					],
					"Version": "2012-10-17"
				},
				"Path": "/",
				"Policies": [
					{
						"PolicyDocument": {
							"Statement": [
								{
									"Action": [
										"logs:CreateLogGroup",
										"logs:CreateLogStream",
										"logs:PutLogEvents"
									],
									"Effect": "Allow",
									"Resource": "arn:aws:logs:*:*:*"
								}
							],
							"Version": "2012-10-17"
						},
						"PolicyName": null
					},
					{
						"PolicyDocument": {
							"Statement": [
								{
									"Action": [
										"s3:PutObject",
										"s3:DeleteObject",
										"s3:List*"
									],
									"Effect": "Allow",
									"Resource": [
										null,
										null
									]
								}
							],
							"Version": "2012-10-17"
						},
						"PolicyName": null
					}
				],
				"RoleName": null
			}
		}
	},
	"Outputs": {
		"BucketName": {
			"Value": null
		},
		"KinesisStreamData": {
			"Value": null
		}
	}
}
