{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Create S3 bucket and Kinesis data Stream",
	"Parameters": {
		"S3BucketName": {
			"Description": "Enter Bucket Name",
			"Type": "String"
		},
		"DirsToCreate": {
      			"Description": "Comma delimited list of directories to create.",
     			"Type": "CommaDelimitedList"
    		},
		"StreamData": {
			"Description": "Enter Stream Name",
			"Type": "String",
			"AllowedPattern": "kinesis-data-stream(-\\w+)+"
		}
	},
	"Resources": {
		"S3Bucket": {
			"Type": "AWS::S3::Bucket",
			"Properties": {
				"BucketName": {"Ref": "S3BucketName"}
			}
		},
		"MyStream": {
			"Type": "AWS::Kinesis::Stream",
			"Properties": {
				"Name": {"Ref": "StreamData"},
				"RetentionPeriodHours": 168,
				"ShardCount": 4,
				"StreamEncryption": {
					"EncryptionType": "KMS",
					"KeyId": "alias/aws/kinesis"
				}
			}
		},
		"S3CustomResource": {
      "Type": "Custom::S3CustomResource",
      "DependsOn":"AWSLambdaExecutionRole",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["AWSLambdaFunction","Arn"]},
        "the_bucket": {"Ref":"S3BucketName"},
        "dirs_to_create": {"Ref":"DirsToCreate"}
      }
    },
    "AWSLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Description": "Work with S3 Buckets!",
        "FunctionName": {"Fn::Sub":"${AWS::StackName}-${AWS::Region}-lambda"},
        "Handler": "index.handler",
        "Role": {"Fn::GetAtt": ["AWSLambdaExecutionRole","Arn"]},
        "Timeout": 360,
        "Runtime": "python3.6",
        "Code": {
          "ZipFile": "import boto3\r\nimport cfnresponse\r\ndef handler(event, context):\r\n    # Init ...\r\n    the_event = event['RequestType']\r\n    print(\"The event is: \", str(the_event))\r\n    response_data = {}\r\n    s_3 = boto3.client('s3')\r\n    # Retrieve parameters\r\n    the_bucket = event['ResourceProperties']['the_bucket']\r\n    dirs_to_create = event['ResourceProperties']['dirs_to_create']\r\n    try:\r\n        if the_event in ('Create', 'Update'):\r\n            print(\"Requested folders: \", str(dirs_to_create))\r\n            for dir_name in dirs_to_create:\r\n                print(\"Creating: \", str(dir_name))\r\n                s_3.put_object(Bucket=the_bucket,\r\n                                Key=(dir_name\r\n                                    + '\/'))\r\n        elif the_event == 'Delete':\r\n            print(\"Deleting S3 content...\")\r\n            b_operator = boto3.resource('s3')\r\n            b_operator.Bucket(str(the_bucket)).objects.all().delete()\r\n        # Everything OK... send the signal back\r\n        print(\"Operation successful!\")\r\n        cfnresponse.send(event,\r\n                        context,\r\n                        cfnresponse.SUCCESS,\r\n                        response_data)\r\n    except Exception as e:\r\n        print(\"Operation failed...\")\r\n        print(str(e))\r\n        response_data['Data'] = str(e)\r\n        cfnresponse.send(event,\r\n                        context,\r\n                        cfnresponse.FAILED,\r\n                        response_data)"
        }
      }
    }
            },
            "PolicyName": {"Fn::Sub":"${AWS::StackName}-${AWS::Region}-AWSLambda-S3"}
          }
        ],
        "RoleName": {"Fn::Sub":"${AWS::StackName}-${AWS::Region}-AWSLambdaExecutionRole"}
      }
    }
	},
	"Outputs": {
        "DataStreamName": {
            "Value": {
                "Ref": "StreamData"
            },
            "Description": "Name of the sample Amazon Kinesis ."
        },
        "BucketName": {
           "Value": {
               "Ref": "S3BucketName"
           },
           "Description": "Name of the sample Amazon S3 bucket."
       }
    }
    }
