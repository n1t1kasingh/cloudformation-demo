AWSTemplateFormatVersion: '2010-09-09'
Description: "Create S3 bucket and Kinesis data Stream"


Parameters: 
    S3BucketName:
        Description: Enter Bucket Name
        Type: String
       #AllowedPattern: cerner(-\w+)+
       #ConstraintDescription: Follow the conventions https://github.cerner.com/aws/aws-handbook/blob/master/wiki/recommendations/s3.md#naming-conventions 
    DirsToCreate:
        Description: "Comma delimited list of directories to create."
        Type: CommaDelimitedList
        #AllowedPattern: kinesis-datastream-analytics-(-\w+)+
    StreamData:
        Description: Enter Stream Name
        Type: String
        AllowedPattern: kinesis-data-stream(-\w+)+
    Shards:
        Description: Enter Reqd Shard Count
        Type: Integer

Resources:
    S3Bucket: 
        Type: AWS::S3::Bucket
        Properties: 
            BucketName: !Ref S3BucketName
    MyStream:
          Type: AWS::Kinesis::Stream
          Properties: 
            Name: !Ref StreamData
            RetentionPeriodHours : 168
            ShardCount: !Ref Shards
            StreamEncryption: 
                  EncryptionType: KMS
                  KeyId: alias/aws/kinesis

    S3CustomResource:
        Type: Custom::S3CustomResource
        Properties:
            ServiceToken: !GetAtt AWSLambdaFunction.Arn
            the_bucket: !Ref S3BucketName
            dirs_to_create: !Ref DirsToCreate
    AWSLambdaFunction:
     Type: "AWS::Lambda::Function"
     Properties:
       Description: "Work with S3 Buckets!"
       FunctionName: !Sub '${AWS::StackName}-${AWS::Region}-lambda'
       Handler: index.handler
       Role: !GetAtt AWSLambdaExecutionRole.Arn
       Timeout: 360
       Runtime: python3.6
       Code:
         ZipFile: |
          import boto3
          import cfnresponse
          def handler(event, context):
              # Init ...
              the_event = event['RequestType']
              print("The event is: ", str(the_event))
              response_data = {}
              s_3 = boto3.client('s3')
              # Retrieve parameters
              the_bucket = event['ResourceProperties']['the_bucket']
              dirs_to_create = event['ResourceProperties']['dirs_to_create']
              try:
                  if the_event in ('Create', 'Update'):
                      print("Requested folders: ", str(dirs_to_create))
                      for dir_name in dirs_to_create:
                          print("Creating: ", str(dir_name))
                          s_3.put_object(Bucket=the_bucket,
                                         Key=(dir_name
                                              + '/'))
                  print("Operation successful!")
                  cfnresponse.send(event,
                                   context,
                                   cfnresponse.SUCCESS,
                                   response_data)
              except Exception as e:
                  print("Operation failed...")
                  print(str(e))
                  response_data['Data'] = str(e)
                  cfnresponse.send(event,
                                   context,
                                   cfnresponse.FAILED,
                                   response_data)
            
    AWSLambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
          Version: '2012-10-17'
        Path: "/"
        Policies:
        - PolicyDocument:
            Statement:
            - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Effect: Allow
              Resource: arn:aws:logs:*:*:*
            Version: '2012-10-17'
          PolicyName: !Sub ${AWS::StackName}-${AWS::Region}-AWSLambda-CW
        - PolicyDocument:
            Statement:
            - Action:
              - s3:PutObject
              - s3:DeleteObject
              - s3:List*
              Effect: Allow
              Resource:
              - !Sub arn:aws:s3:::${S3BucketName}/*
              - !Sub arn:aws:s3:::${S3BucketName}
            Version: '2012-10-17'
          PolicyName: !Sub ${AWS::StackName}-${AWS::Region}-AWSLambda-S3


Outputs:
    BucketName: 
        Value: !Ref 'S3Bucket'
    KinesisStreamData:
        Value: !Ref 'StreamData'
